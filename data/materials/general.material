
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
material ppx_glass_env		// per pixel  with cubic reflection  glass (alpha)
{
	receive_shadows off
	set $ambientCol "1 1 1 1"
	set $diffuseCol "1 1 1 1"
	set $specularCol "1 1 1"
	set $shininess "32"
	set $depthBias "0"
	set $envParsM "0.8 0.2 0 0"
 
	technique
	{
		pass
		{
			scene_blend  alpha_blend
			cull_hardware none
			transparent_sorting on
			depth_bias $depthBias
			depth_write off
 
			ambient $ambientCol
			diffuse $diffuseCol
			specular $specularCol $shininess
 
			vertex_program_ref ambient_vs  {  }
			fragment_program_ref ambient_ps  {  }
 
			texture_unit diffuseMap
			{
				texture white.png
			}
		}
		pass
		{
			ambient 0 0 0 0
			diffuse $diffuseCol
			specular $specularCol $shininess
 
			scene_blend  add
			cull_hardware none
			transparent_sorting on
			depth_bias $depthBias
			depth_write off
 
			vertex_program_ref diffuse_vs  {  }
			fragment_program_ref diffuse_ps_env
			{
				param_named envPars float4 $envParsM
			}
 
			texture_unit diffuseMap
			{
				texture white.png
			}
			texture_unit normalMap
			{
				texture flat_n.png
			}
			texture_unit envMap
			{
				env_map cubic_reflection
				cubic_texture ReflectionCube combinedUVW
			}
		}
	}
	// this is the technique for the scheme "geom" that the SSAO
    // compositor uses to render the geometry map
	technique geom
	{
	    scheme geom

	    pass
	    {
	        cull_hardware none
			vertex_program_ref geom_vs
	        {
	        }

	        fragment_program_ref geom_white_ps
	        {
	        }
	    }
	}
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 
material ppx_glass			// per pixel  glass (alpha)
{
	receive_shadows off
	set $ambientCol "1 1 1 1"
	set $diffuseCol "1 1 1 1"
	set $specularCol "1 1 1"
	set $shininess "32"
	set $depthBias "0"
	set $alphaParsA "0.2 0.2 0.3 0"
 
	technique
	{
		pass
		{
			scene_blend  alpha_blend
			cull_hardware  clockwise
			transparent_sorting on
			depth_bias $depthBias
			depth_write off
 
			ambient $ambientCol
			diffuse $diffuseCol
			specular $specularCol $shininess
 
			vertex_program_ref diffuse_vs  {  }
			fragment_program_ref diffuse_ps_a
			{
				param_named alphaPars float4 $alphaParsA
			}
 
			texture_unit diffuseMap
			{
				texture white.png
			}
		}
		pass
		{
			scene_blend  alpha_blend
			cull_hardware  anticlockwise
			transparent_sorting on
			depth_bias $depthBias
			depth_write off
 
			ambient $ambientCol
			diffuse $diffuseCol
			specular $specularCol $shininess
 
			vertex_program_ref diffuse_vs  {  }
			fragment_program_ref diffuse_ps_a
			{
				param_named alphaPars float4 $alphaParsA
			}
 
			texture_unit diffuseMap
			{
				texture white.png
			}
		}

	}
	// this is the technique for the scheme "geom" that the SSAO
    // compositor uses to render the geometry map
	technique geom
	{
	    scheme geom

	    pass
	    {
	        vertex_program_ref geom_vs
	        {
	        }

	        fragment_program_ref geom_white_ps
	        {
	        }
	    }
	}
}
